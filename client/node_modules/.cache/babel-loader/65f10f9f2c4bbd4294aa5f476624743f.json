{"ast":null,"code":"import React from \"react\";\nimport { FormControl, InputLabel, FormLabel, FormHelperText, Input } from '@material-ui/core'; // These imports are needed to implement Web3, and to connect the React client to the Ethereum server\n\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\nconst web3 = new Web3(Web3.givenProvider); // Contract address is provided by Truffle migration\n\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst NewTokenForm = () => {\n  function getTokenDetails(id) {\n    return ContractInstance.methods.creatorTokens(id).call(); //can alternatively try the getToken function I made\n  }\n\n  tokens = 2;\n\n  function displayTokens(tokens) {\n    for (let i = 0; i < tokens; i++) {\n      getTokenDetails(i).then(function (token) {\n        return `<div class=\"token\">\n\t          <ul>\n\t            <li>creatorAddress: ${token.creatorAddress}</li>\n\t            <li>name: ${token.name}</li>\n\t            <li>symbol: ${token.symbol}</li>\n\t            <li>description: ${token.description}</li>\n\t            <li>verified: ${token.verified}</li>\n\t            <li>outstanding: ${token.outstanding}</li>\n\t            <li>maxSupply: ${token.maxSupply}</li>\n\t          </ul>\n\t        </div>`;\n      });\n    }\n  } // Initialize empty array of Creator Tokens\n  //let creatorTokenCount = 0;\n  //let creatorTokenArray = ['cats'];\n  //let token = 1;\n  //ContractInstance.methods.getCreatorTokenCount().call().then(value => (creatorTokenCount = value));\n  //ContractInstance.methods.getToken(5).call().then(value => (token = value));\n  //async function handleCreatorToken() {\n  //let creatorTokenCount = await ContractInstance.methods.getCreatorTokenCount().call());\n  //let creatorToken0 = await ContractInstance.methods.creatorTokens(0).call();\n  //for (let i = 0; i < creatorTokenCount; i++) {\n  //\tconst item = await ContractInstance.methods.creatorTokens(i).call();\n  //\tconsole.log(`publicData[${i}] = ${item}`);\n  //\tcreatorTokenArray.push(item);\n  //}\n  //return (\n  //creatorTokenCount\n  //);\n  //}\n\n\n  return null;\n};\n\nexport default NewTokenForm;","map":{"version":3,"sources":["/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/NewTokenForm.js"],"names":["React","FormControl","InputLabel","FormLabel","FormHelperText","Input","Web3","ABI","contractAddr","web3","givenProvider","ContractInstance","eth","Contract","NewTokenForm","getTokenDetails","id","methods","creatorTokens","call","tokens","displayTokens","i","then","token","creatorAddress","name","symbol","description","verified","outstanding","maxSupply"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,cAA7C,EAA6DC,KAA7D,QAA0E,mBAA1E,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,MAAMC,IAAI,GAAG,IAAIH,IAAJ,CAASA,IAAI,CAACI,aAAd,CAAb,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CAAsBN,GAAtB,EAA2BC,YAA3B,CAAzB;;AAEA,MAAMM,YAAY,GAAG,MAAM;AAE1B,WAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAC3B,WAAOL,gBAAgB,CAACM,OAAjB,CAAyBC,aAAzB,CAAuCF,EAAvC,EAA2CG,IAA3C,EAAP,CAD2B,CAC+B;AAC3D;;AAEDC,EAAAA,MAAM,GAAG,CAAT;;AAEA,WAASC,aAAT,CAAuBD,MAAvB,EAA+B;AAC7B,SAAK,IAAIE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGF,MAAlB,EAA0BE,CAAC,EAA3B,EAA+B;AAE7BP,MAAAA,eAAe,CAACO,CAAD,CAAf,CACGC,IADH,CACQ,UAAUC,KAAV,EAAiB;AACtB,eACE;AACV;AACA,mCAAmCA,KAAK,CAACC,cAAe;AACxD,yBAAyBD,KAAK,CAACE,IAAK;AACpC,2BAA2BF,KAAK,CAACG,MAAO;AACxC,gCAAgCH,KAAK,CAACI,WAAY;AAClD,6BAA6BJ,KAAK,CAACK,QAAS;AAC5C,gCAAgCL,KAAK,CAACM,WAAY;AAClD,8BAA8BN,KAAK,CAACO,SAAU;AAC9C;AACA,gBAXQ;AAYC,OAdJ;AAeD;AACF,GA3ByB,CA6B1B;AACA;AACA;AACA;AAEA;AACA;AAGA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACD;AACD;;;AAEC,SAAQ,IAAR;AAED,CArDD;;AAuDA,eAAejB,YAAf","sourcesContent":["import React from \"react\";\nimport { FormControl, InputLabel, FormLabel, FormHelperText, Input } from '@material-ui/core';\n// These imports are needed to implement Web3, and to connect the React client to the Ethereum server\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\n\nconst web3 = new Web3(Web3.givenProvider);\n// Contract address is provided by Truffle migration\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst NewTokenForm = () => {\n\n\tfunction getTokenDetails(id) {\n\t  return ContractInstance.methods.creatorTokens(id).call(); //can alternatively try the getToken function I made\n\t}\n\n\ttokens = 2;\n\n\tfunction displayTokens(tokens) {\n\t  for (let i=0; i < tokens; i++) {\n\n\t    getTokenDetails(i)\n\t      .then(function (token) {\n\t      \treturn(\n\t        `<div class=\"token\">\n\t          <ul>\n\t            <li>creatorAddress: ${token.creatorAddress}</li>\n\t            <li>name: ${token.name}</li>\n\t            <li>symbol: ${token.symbol}</li>\n\t            <li>description: ${token.description}</li>\n\t            <li>verified: ${token.verified}</li>\n\t            <li>outstanding: ${token.outstanding}</li>\n\t            <li>maxSupply: ${token.maxSupply}</li>\n\t          </ul>\n\t        </div>`\n\t      )});\n\t  }\n\t}\n\n\t// Initialize empty array of Creator Tokens\n\t//let creatorTokenCount = 0;\n\t//let creatorTokenArray = ['cats'];\n\t//let token = 1;\n\n\t//ContractInstance.methods.getCreatorTokenCount().call().then(value => (creatorTokenCount = value));\n\t//ContractInstance.methods.getToken(5).call().then(value => (token = value));\n\n\n\t//async function handleCreatorToken() {\n\t\t//let creatorTokenCount = await ContractInstance.methods.getCreatorTokenCount().call());\n\t\t//let creatorToken0 = await ContractInstance.methods.creatorTokens(0).call();\n\t\t//for (let i = 0; i < creatorTokenCount; i++) {\n\t\t//\tconst item = await ContractInstance.methods.creatorTokens(i).call();\n\t\t//\tconsole.log(`publicData[${i}] = ${item}`);\n\t\t//\tcreatorTokenArray.push(item);\n\t\t//}\n\t\t//return (\n\t\t\t//creatorTokenCount\n\t\t//);\n\t//}\n\n  return (null);\n\n};\n\nexport default NewTokenForm;"]},"metadata":{},"sourceType":"module"}