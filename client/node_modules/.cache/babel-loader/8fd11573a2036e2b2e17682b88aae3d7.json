{"ast":null,"code":"import React from \"react\";\nimport { FormControl, InputLabel, FormLabel, FormHelperText, Input } from '@material-ui/core'; // These imports are needed to implement Web3, and to connect the React client to the Ethereum server\n\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\nconst web3 = new Web3(Web3.givenProvider); // Contract address is provided by Truffle migration\n\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst NewTokenForm = () => {\n  //function getTokenDetails(id) {\n  //\treturn ContractInstance.methods.creatorTokens(id).call()\n  //}\n  //function displayTokens(id) {\n  //\tgetTokenDetails(id).then(function(token) {\n  //\t\treturn token.name\n  //\t});\n  //}\n  // Initialize empty array of Creator Tokens\n  let creatorTokenCount = 0; //let creatorTokenArray = ['cats'];\n  //let token = 1;\n  //let creatorTokenCount = ContractInstance.methods.getCreatorTokenCount().call();\n  //ContractInstance.methods.getCreatorTokenCount().call().then(value => (creatorTokenCount = value));\n  //ContractInstance.methods.getToken(5).call().then(value => (token = value));\n\n  async function handleCreatorToken() {\n    //ContractInstance.methods.getCreatorTokens().call().then(var tokens = ContractInstance.creatorTokens)\n    //tokens = ContractInstance.methods.getCreatorTokens().call();\n    creatorTokenCount = await ContractInstance.methods.getCreatorTokenCount().call(); //let creatorToken0 = await ContractInstance.methods.creatorTokens(0).call();\n    //for (let i = 0; i < creatorTokenCount; i++) {\n    //\tconst item = await ContractInstance.methods.creatorTokens(i).call();\n    //\tconsole.log(`publicData[${i}] = ${item}`);\n    //\tcreatorTokenArray.push(item);\n    //}\n    //return (\n    //\tcreatorTokenCount\n    //);\n  } //handleCreatorToken();\n\n\n  return creatorTokenCount;\n};\n\nexport default NewTokenForm;","map":{"version":3,"sources":["/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/NewTokenForm.jsx"],"names":["React","FormControl","InputLabel","FormLabel","FormHelperText","Input","Web3","ABI","contractAddr","web3","givenProvider","ContractInstance","eth","Contract","NewTokenForm","creatorTokenCount","handleCreatorToken","methods","getCreatorTokenCount","call"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,cAA7C,EAA6DC,KAA7D,QAA0E,mBAA1E,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,MAAMC,IAAI,GAAG,IAAIH,IAAJ,CAASA,IAAI,CAACI,aAAd,CAAb,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CAAsBN,GAAtB,EAA2BC,YAA3B,CAAzB;;AAEA,MAAMM,YAAY,GAAG,MAAM;AAE1B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAIC,iBAAiB,GAAG,CAAxB,CAb0B,CAc1B;AACA;AAEA;AACA;AACA;;AAGA,iBAAeC,kBAAf,GAAoC;AACnC;AACA;AACAD,IAAAA,iBAAiB,GAAG,MAAMJ,gBAAgB,CAACM,OAAjB,CAAyBC,oBAAzB,GAAgDC,IAAhD,EAA1B,CAHmC,CAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAnCyB,CAqC1B;;;AAEC,SACCJ,iBADD;AAID,CA3CD;;AA6CA,eAAeD,YAAf","sourcesContent":["import React from \"react\";\nimport { FormControl, InputLabel, FormLabel, FormHelperText, Input } from '@material-ui/core';\n// These imports are needed to implement Web3, and to connect the React client to the Ethereum server\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\n\nconst web3 = new Web3(Web3.givenProvider);\n// Contract address is provided by Truffle migration\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst NewTokenForm = () => {\n\n\t//function getTokenDetails(id) {\n\t//\treturn ContractInstance.methods.creatorTokens(id).call()\n\t//}\n\n\t//function displayTokens(id) {\n\t//\tgetTokenDetails(id).then(function(token) {\n\t//\t\treturn token.name\n\t//\t});\n\t//}\n\n\t// Initialize empty array of Creator Tokens\n\tlet creatorTokenCount = 0;\n\t//let creatorTokenArray = ['cats'];\n\t//let token = 1;\n\n\t//let creatorTokenCount = ContractInstance.methods.getCreatorTokenCount().call();\n\t//ContractInstance.methods.getCreatorTokenCount().call().then(value => (creatorTokenCount = value));\n\t//ContractInstance.methods.getToken(5).call().then(value => (token = value));\n\n\n\tasync function handleCreatorToken() {\n\t\t//ContractInstance.methods.getCreatorTokens().call().then(var tokens = ContractInstance.creatorTokens)\n\t\t//tokens = ContractInstance.methods.getCreatorTokens().call();\n\t\tcreatorTokenCount = await ContractInstance.methods.getCreatorTokenCount().call();\n\t\t//let creatorToken0 = await ContractInstance.methods.creatorTokens(0).call();\n\t\t//for (let i = 0; i < creatorTokenCount; i++) {\n\t\t//\tconst item = await ContractInstance.methods.creatorTokens(i).call();\n\t\t//\tconsole.log(`publicData[${i}] = ${item}`);\n\t\t//\tcreatorTokenArray.push(item);\n\t\t//}\n\t\t//return (\n\t\t//\tcreatorTokenCount\n\t\t//);\n\t}\n\n\t//handleCreatorToken();\n\n  return (\n  \tcreatorTokenCount\n  );\n\n};\n\nexport default NewTokenForm;"]},"metadata":{},"sourceType":"module"}