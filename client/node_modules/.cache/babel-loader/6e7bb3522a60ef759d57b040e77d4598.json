{"ast":null,"code":"var _jsxFileName = \"/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/NewTokenForm.js\";\nimport React from \"react\";\nimport { FormControl, InputLabel, FormLabel, FormHelperText, Input } from '@material-ui/core'; // These imports are needed to implement Web3, and to connect the React client to the Ethereum server\n\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\nconst web3 = new Web3(Web3.givenProvider); // Contract address is provided by Truffle migration\n\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst NewTokenForm = () => {\n  // Initialize empty array of Creator Tokens\n  let creatorTokenCount = 0;\n  let creatorTokenArray = ['cats'];\n  let token = 1; //ContractInstance.methods.getCreatorTokenCount().call().then(value => (creatorTokenCount = value));\n\n  ContractInstance.methods.getToken(5).call().then(value => token = value);\n\n  async function handleCreatorToken() {\n    await ContractInstance.methods.getCreatorTokenCount().call().then(value => creatorTokenCount = value);\n    ; //for (let i = 0; i < creatorTokenCount; i++) {\n    //\tconst item = await ContractInstance.methods.creatorTokens(i).call();\n    //\tconsole.log(`publicData[${i}] = ${item}`);\n    //\tcreatorTokenArray.push(item);\n    //}\n    //return (\n    //\tcreatorTokenArray\n    //);\n  }\n\n  handleCreatorToken();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, \"hello\", token, creatorTokenCount, creatorTokenArray, \"goodbye\");\n};\n\nexport default NewTokenForm;","map":{"version":3,"sources":["/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/NewTokenForm.js"],"names":["React","FormControl","InputLabel","FormLabel","FormHelperText","Input","Web3","ABI","contractAddr","web3","givenProvider","ContractInstance","eth","Contract","NewTokenForm","creatorTokenCount","creatorTokenArray","token","methods","getToken","call","then","value","handleCreatorToken","getCreatorTokenCount"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,cAA7C,EAA6DC,KAA7D,QAA0E,mBAA1E,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,MAAMC,IAAI,GAAG,IAAIH,IAAJ,CAASA,IAAI,CAACI,aAAd,CAAb,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CAAsBN,GAAtB,EAA2BC,YAA3B,CAAzB;;AAEA,MAAMM,YAAY,GAAG,MAAM;AAE1B;AACA,MAAIC,iBAAiB,GAAG,CAAxB;AACA,MAAIC,iBAAiB,GAAG,CAAC,MAAD,CAAxB;AACA,MAAIC,KAAK,GAAG,CAAZ,CAL0B,CAO1B;;AACAN,EAAAA,gBAAgB,CAACO,OAAjB,CAAyBC,QAAzB,CAAkC,CAAlC,EAAqCC,IAArC,GAA4CC,IAA5C,CAAiDC,KAAK,IAAKL,KAAK,GAAGK,KAAnE;;AAGA,iBAAeC,kBAAf,GAAoC;AACnC,UAAMZ,gBAAgB,CAACO,OAAjB,CAAyBM,oBAAzB,GAAgDJ,IAAhD,GAAuDC,IAAvD,CAA4DC,KAAK,IAAKP,iBAAiB,GAAGO,KAA1F,CAAN;AAAwG,KADrE,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACFC,EAAAA,kBAAkB;AAEhB,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEEN,KAFF,EAGEF,iBAHF,EAIEC,iBAJF,YADD;AAUD,CAlCD;;AAoCA,eAAeF,YAAf","sourcesContent":["import React from \"react\";\nimport { FormControl, InputLabel, FormLabel, FormHelperText, Input } from '@material-ui/core';\n// These imports are needed to implement Web3, and to connect the React client to the Ethereum server\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\n\nconst web3 = new Web3(Web3.givenProvider);\n// Contract address is provided by Truffle migration\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst NewTokenForm = () => {\n\n\t// Initialize empty array of Creator Tokens\n\tlet creatorTokenCount = 0;\n\tlet creatorTokenArray = ['cats'];\n\tlet token = 1;\n\n\t//ContractInstance.methods.getCreatorTokenCount().call().then(value => (creatorTokenCount = value));\n\tContractInstance.methods.getToken(5).call().then(value => (token = value));\n\n\n\tasync function handleCreatorToken() {\n\t\tawait ContractInstance.methods.getCreatorTokenCount().call().then(value => (creatorTokenCount = value));;\n\t\t//for (let i = 0; i < creatorTokenCount; i++) {\n\t\t//\tconst item = await ContractInstance.methods.creatorTokens(i).call();\n\t\t//\tconsole.log(`publicData[${i}] = ${item}`);\n\t\t//\tcreatorTokenArray.push(item);\n\t\t//}\n\t\t//return (\n\t\t//\tcreatorTokenArray\n\t\t//);\n\t}\nhandleCreatorToken();\n\n  return (\n  \t<div>\n \t\t\thello\n \t\t\t{token}\n \t\t\t{creatorTokenCount}\n \t\t\t{creatorTokenArray}\n  \t\tgoodbye\n  \t</div>\n  );\n\n};\n\nexport default NewTokenForm;"]},"metadata":{},"sourceType":"module"}