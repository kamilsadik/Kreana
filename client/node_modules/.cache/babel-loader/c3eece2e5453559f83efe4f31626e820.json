{"ast":null,"code":"var _jsxFileName = \"/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/OwnerDashboard.js\";\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle'; // These imports are needed to implement Web3, and to connect the React client to the Ethereum server\n\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\nconst web3 = new Web3(Web3.givenProvider); // Contract address is provided by Truffle migration\n\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst OwnerDashboard = props => {\n  const {\n    address,\n    name,\n    symbol,\n    description,\n    verified,\n    outstanding,\n    maxSupply,\n    tokenId,\n    avatarUrl,\n    imageUrl\n  } = props; // Initalize open/closed state for verification dialog\n\n  const [verificationOpen, setVerificationOpen] = React.useState(false);\n\n  const handleClickVerificationOpen = () => {\n    setVerificationOpen(true);\n  };\n\n  const handleVerificationClose = () => {\n    setVerificationOpen(false);\n  };\n\n  async function handleWithdraw(e) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.withdraw(account).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.withdraw(account).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  async function handlePayoutPlatformFees(e) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.payoutPlatformFees(account).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.payoutPlatformFees(account).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  async function handleChangePlatformFee(e, newFee) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changePlatformFee(newFee).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.changePlatformFee(newFee).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  async function handleChangeProfitMargin(e, newProfitMargin) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeProfitMargin(newProfitMargin).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.changeProfitMargin(newProfitMargin).send({\n      from: account\n    });\n    console.log(result);\n  } // For simplicity, right now calling this automatically sets verification status to true\n\n\n  async function handleChangeVerification(e, tokenId) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeVerification(tokenId, true).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.changeVerification(tokenId, true).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: verificationOpen,\n    onClose: handleVerificationClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, \"Buy Token\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"Which token do you wish to verify?\"), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"name\",\n    label: \"Token\",\n    placeholder: \"0\",\n    type: \"number\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleVerificationClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    value: tokenId,\n    onClick: e => handleChangeVerification(e, tokenId),\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"Verify\")));\n};\n\nexport default OwnerDashboard;","map":{"version":3,"sources":["/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/OwnerDashboard.js"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Web3","ABI","contractAddr","web3","givenProvider","ContractInstance","eth","Contract","OwnerDashboard","props","address","name","symbol","description","verified","outstanding","maxSupply","tokenId","avatarUrl","imageUrl","verificationOpen","setVerificationOpen","useState","handleClickVerificationOpen","handleVerificationClose","handleWithdraw","e","preventDefault","accounts","window","ethereum","enable","account","gas","methods","withdraw","estimateGas","from","result","send","console","log","handlePayoutPlatformFees","payoutPlatformFees","handleChangePlatformFee","newFee","changePlatformFee","handleChangeProfitMargin","newProfitMargin","changeProfitMargin","handleChangeVerification","changeVerification"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n// These imports are needed to implement Web3, and to connect the React client to the Ethereum server\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\n\nconst web3 = new Web3(Web3.givenProvider);\n// Contract address is provided by Truffle migration\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst OwnerDashboard = props => {\n\n  const { address, name, symbol, description, verified, outstanding, maxSupply, tokenId, avatarUrl, imageUrl } = props;\n\n  // Initalize open/closed state for verification dialog\n  const [verificationOpen, setVerificationOpen] = React.useState(false);\n  const handleClickVerificationOpen = () => {\n    setVerificationOpen(true);\n  };\n  const handleVerificationClose = () => {\n    setVerificationOpen(false);\n  }\n\n  async function handleWithdraw(e) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.withdraw(account).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.withdraw(account).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  async function handlePayoutPlatformFees(e) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.payoutPlatformFees(account).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.payoutPlatformFees(account).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  async function handleChangePlatformFee(e, newFee) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changePlatformFee(newFee).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.changePlatformFee(newFee).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  async function handleChangeProfitMargin(e, newProfitMargin) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeProfitMargin(newProfitMargin).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.changeProfitMargin(newProfitMargin).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  // For simplicity, right now calling this automatically sets verification status to true\n  async function handleChangeVerification(e, tokenId) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeVerification(tokenId, true).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.changeVerification(tokenId, true).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n\treturn (\n\t\t<Dialog\n\t\topen={verificationOpen}\n\t\tonClose={handleVerificationClose}\n\t\taria-labelledby=\"form-dialog-title\">\n\t\t  <DialogTitle id=\"form-dialog-title\">Buy Token</DialogTitle>\n\t\t  <DialogContent>\n\t\t    <DialogContentText>\n\t\t      Which token do you wish to verify?\n\t\t    </DialogContentText>\n\t\t    <TextField\n\t\t      autoFocus\n\t\t      margin=\"dense\"\n\t\t      id=\"name\"\n\t\t      label=\"Token\"\n\t\t      placeholder=\"0\"\n\t\t      type=\"number\"\n\t\t      fullWidth\n\t\t    />\n\t\t  </DialogContent>\n\t\t  <DialogActions>\n\t\t    <Button\n\t\t    onClick={handleVerificationClose}\n\t\t    color=\"primary\">\n\t\t      Cancel\n\t\t    </Button>\n\t\t    <Button\n\t\t    value={tokenId}\n\t\t    onClick={(e) => handleChangeVerification(e, tokenId)}\n\t\t    color=\"primary\">\n\t\t      Verify\n\t\t    </Button>\n\t\t  </DialogActions>\n\t\t</Dialog>\n\t);\n}\n\nexport default OwnerDashboard;"]},"metadata":{},"sourceType":"module"}