{"ast":null,"code":"import React from \"react\"; // These imports are needed to implement Web3, and to connect the React client to the Ethereum server\n\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\nconst web3 = new Web3(Web3.givenProvider); // Contract address is provided by Truffle migration\n\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst UserHoldings = () => {\n  // Initialize empty array of Creator Tokens\n  let holdings = [];\n\n  async function handleUserHoldings() {\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const userHoldings = await ContractInstance.methods.userToHoldings(account, 0).call();\n    holdings.push(userHoldings);\n    console.log(holdings); //return(creatorTokenCount)\n  } //async function handleCreatorTokenArray(qty) {\n  //\t\tfor (let i=0; i<qty; i++) {\n  //\t\t\tconst token = await ContractInstance.methods.creatorTokens(i).call();\n  //\t\t\ttokens.push(token);\n  //\t\t}\n  //\t\tconsole.log(tokens);\n  //\t}\n  //\tasync function handleCreatorTokens(){\n  //\t\tawait handleCreatorTokenArray(await handleCreatorTokenCount());\n  //\t}\n\n\n  handleUserHoldings();\n  return null;\n};\n\nexport default UserHoldings;","map":{"version":3,"sources":["/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/UserHoldings.jsx"],"names":["React","Web3","ABI","contractAddr","web3","givenProvider","ContractInstance","eth","Contract","UserHoldings","holdings","handleUserHoldings","accounts","window","ethereum","enable","account","userHoldings","methods","userToHoldings","call","push","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,MAAMC,IAAI,GAAG,IAAIH,IAAJ,CAASA,IAAI,CAACI,aAAd,CAAb,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CAAsBN,GAAtB,EAA2BC,YAA3B,CAAzB;;AAEA,MAAMM,YAAY,GAAG,MAAM;AAE1B;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAIA,iBAAeC,kBAAf,GAAoC;AACnC,UAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAvB;AACA,UAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACA,UAAMK,YAAY,GAAG,MAAMX,gBAAgB,CAACY,OAAjB,CAAyBC,cAAzB,CAAwCH,OAAxC,EAAiD,CAAjD,EAAoDI,IAApD,EAA3B;AACAV,IAAAA,QAAQ,CAACW,IAAT,CAAcJ,YAAd;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ,EALmC,CAMnC;AACA,GAdyB,CAgB1B;AACD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAECC,EAAAA,kBAAkB;AAElB,SACC,IADD;AAIA,CAlCD;;AAoCA,eAAeF,YAAf","sourcesContent":["import React from \"react\";\n// These imports are needed to implement Web3, and to connect the React client to the Ethereum server\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\n\nconst web3 = new Web3(Web3.givenProvider);\n// Contract address is provided by Truffle migration\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst UserHoldings = () => {\n\n\t// Initialize empty array of Creator Tokens\n\tlet holdings = [];\n\n\t\n\n\tasync function handleUserHoldings() {\n\t\tconst accounts = await window.ethereum.enable();\n\t\tconst account = accounts[0];\n\t\tconst userHoldings = await ContractInstance.methods.userToHoldings(account, 0).call();\n\t\tholdings.push(userHoldings)\n\t\tconsole.log(holdings);\n\t\t//return(creatorTokenCount)\n\t}\n\n\t//async function handleCreatorTokenArray(qty) {\n//\t\tfor (let i=0; i<qty; i++) {\n//\t\t\tconst token = await ContractInstance.methods.creatorTokens(i).call();\n//\t\t\ttokens.push(token);\n//\t\t}\n//\t\tconsole.log(tokens);\n//\t}\n\n//\tasync function handleCreatorTokens(){\n//\t\tawait handleCreatorTokenArray(await handleCreatorTokenCount());\n//\t}\n\n\thandleUserHoldings();\n\n\treturn (\n\t\tnull\n\t);\n\n};\n\nexport default UserHoldings;"]},"metadata":{},"sourceType":"module"}