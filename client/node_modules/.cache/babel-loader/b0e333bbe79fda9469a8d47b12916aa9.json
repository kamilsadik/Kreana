{"ast":null,"code":"var _jsxFileName = \"/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/OwnerDashboard.jsx\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { tokens } from \"./Inventory.jsx\"; // These imports are needed to implement Web3, and to connect the React client to the Ethereum server\n\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\nconst web3 = new Web3(Web3.givenProvider); // Contract address is provided by Truffle migration\n\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst OwnerDashboard = props => {\n  const {\n    address,\n    name,\n    symbol,\n    description,\n    verified,\n    outstanding,\n    maxSupply,\n    lastPrice,\n    creatorTokenId //avatarUrl,\n    //imageUrl\n\n  } = props;\n  const [tokenState, setTokenState] = useState([]);\n  console.log(tokens);\n  window.tokens = tokens;\n  useEffect(() => {\n    async function fetchData() {\n      setTokenState(await tokens);\n    }\n\n    fetchData();\n  }, []); // Initalize open/closed state for verification dialog\n\n  const [verificationOpen, setVerificationOpen] = React.useState(false);\n\n  const handleClickVerificationOpen = () => {\n    setVerificationOpen(true);\n  };\n\n  const handleVerificationClose = () => {\n    setVerificationOpen(false);\n  };\n\n  async function handleWithdraw(e) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.withdraw(account).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.withdraw(account).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  async function handlePayoutPlatformFees(e) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.payoutPlatformFees(account).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.payoutPlatformFees(account).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  async function handleChangePlatformFee(e, newFee) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changePlatformFee(newFee).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.changePlatformFee(newFee).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  async function handleChangeProfitMargin(e, newProfitMargin) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeProfitMargin(newProfitMargin).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.changeProfitMargin(newProfitMargin).send({\n      from: account\n    });\n    console.log(result);\n  } // For simplicity, right now calling this automatically sets verification status to true\n\n\n  async function handleChangeVerification(e, creatorTokenId) {\n    e.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeVerification(creatorTokenId, true).estimateGas({\n      from: account\n    });\n    const result = await ContractInstance.methods.changeVerification(creatorTokenId, true).send({\n      from: account\n    });\n    console.log(result);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: handleClickVerificationOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 3\n    }\n  }, \"Verify a Token\"), /*#__PURE__*/React.createElement(Dialog, {\n    open: verificationOpen,\n    onClose: handleVerificationClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, \"Verify Token\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Which token do you wish to verify?\"), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"name\",\n    label: \"Token\",\n    placeholder: \"0\",\n    type: \"number\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleVerificationClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    value: creatorTokenId,\n    onClick: e => handleChangeVerification(e, creatorTokenId),\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Verify\"))));\n};\n\nexport default OwnerDashboard;","map":{"version":3,"sources":["/Users/kamilalizaisadik/DeFi/Dynamic Automated Market Maker/CreatorTokenExchange/client/src/OwnerDashboard.jsx"],"names":["React","Component","useState","useEffect","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","tokens","Web3","ABI","contractAddr","web3","givenProvider","ContractInstance","eth","Contract","OwnerDashboard","props","address","name","symbol","description","verified","outstanding","maxSupply","lastPrice","creatorTokenId","tokenState","setTokenState","console","log","window","fetchData","verificationOpen","setVerificationOpen","handleClickVerificationOpen","handleVerificationClose","handleWithdraw","e","preventDefault","accounts","ethereum","enable","account","gas","methods","withdraw","estimateGas","from","result","send","handlePayoutPlatformFees","payoutPlatformFees","handleChangePlatformFee","newFee","changePlatformFee","handleChangeProfitMargin","newProfitMargin","changeProfitMargin","handleChangeVerification","changeVerification"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { tokens } from \"./Inventory.jsx\";\n// These imports are needed to implement Web3, and to connect the React client to the Ethereum server\nimport Web3 from './web3';\nimport { ABI } from './ABI';\nimport { contractAddr } from './Address';\n\nconst web3 = new Web3(Web3.givenProvider);\n// Contract address is provided by Truffle migration\nconst ContractInstance = new web3.eth.Contract(ABI, contractAddr);\n\nconst OwnerDashboard = props => {\n\tconst {\n\t  address,\n\t  name,\n\t  symbol,\n\t  description,\n\t  verified,\n\t  outstanding,\n\t  maxSupply,\n\t  lastPrice,\n\t  creatorTokenId,\n\t  //avatarUrl,\n\t  //imageUrl\n\t} = props;\n\n\tconst [tokenState, setTokenState] = useState([]);\n\tconsole.log(tokens);\n\twindow.tokens=tokens;\n\tuseEffect(() => {\n\t  async function fetchData() {\n\t    setTokenState(await tokens);\n\t  }\n\t  fetchData();\n\t}, []);\n\n\t// Initalize open/closed state for verification dialog\n\tconst [verificationOpen, setVerificationOpen] = React.useState(false);\n\tconst handleClickVerificationOpen = () => {\n\t  setVerificationOpen(true);\n\t};\n\tconst handleVerificationClose = () => {\n\t  setVerificationOpen(false);\n\t}\n\n  async function handleWithdraw(e) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.withdraw(account).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.withdraw(account).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  async function handlePayoutPlatformFees(e) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.payoutPlatformFees(account).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.payoutPlatformFees(account).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  async function handleChangePlatformFee(e, newFee) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changePlatformFee(newFee).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.changePlatformFee(newFee).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  async function handleChangeProfitMargin(e, newProfitMargin) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeProfitMargin(newProfitMargin).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.changeProfitMargin(newProfitMargin).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n  // For simplicity, right now calling this automatically sets verification status to true\n  async function handleChangeVerification(e, creatorTokenId) {\n    e.preventDefault();    \n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await ContractInstance.methods.changeVerification(creatorTokenId, true).estimateGas({\n      from: account,\n    });\n    const result = await ContractInstance.methods.changeVerification(creatorTokenId, true).send({\n      from: account\n    })\n    console.log(result);\n  }\n\n\treturn (\n\t\t<div>\n\t\t<Button variant=\"outlined\" color=\"primary\" onClick={handleClickVerificationOpen}>\n\t\t  Verify a Token\n\t\t</Button>\n\t\t<Dialog\n\t\topen={verificationOpen}\n\t\tonClose={handleVerificationClose}\n\t\taria-labelledby=\"form-dialog-title\">\n\t\t  <DialogTitle id=\"form-dialog-title\">\n\t\t  Verify Token\n\t\t  </DialogTitle>\n\t\t  <DialogContent>\n\t\t    <DialogContentText>\n\t\t      Which token do you wish to verify?\n\t\t    </DialogContentText>\n\t\t    <TextField\n\t\t      autoFocus\n\t\t      margin=\"dense\"\n\t\t      id=\"name\"\n\t\t      label=\"Token\"\n\t\t      placeholder=\"0\"\n\t\t      type=\"number\"\n\t\t      fullWidth\n\t\t    />\n\t\t  </DialogContent>\n\t\t  <DialogActions>\n\t\t    <Button\n\t\t    onClick={handleVerificationClose}\n\t\t    color=\"primary\">\n\t\t      Cancel\n\t\t    </Button>\n\t\t    <Button\n\t\t    value={creatorTokenId}\n\t\t    onClick={(e) => handleChangeVerification(e, creatorTokenId)}\n\t\t    color=\"primary\">\n\t\t      Verify\n\t\t    </Button>\n\t\t  </DialogActions>\n\t\t</Dialog>\n\t\t</div>\n\t);\n}\n\nexport default OwnerDashboard;"]},"metadata":{},"sourceType":"module"}